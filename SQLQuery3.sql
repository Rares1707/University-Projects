

-- a. modify the type of a column;
CREATE PROCEDURE ModifySeaName AS
	ALTER TABLE Sea
	ALTER COLUMN Sea_name CHAR(20)
GOCREATE PROCEDURE ReverseModifyName AS
	ALTER TABLE Sea
	ALTER COLUMN Sea_name VARCHAR(20)
GO-- b. add a column;CREATE PROCEDURE AddColumnToRegion AS	ALTER TABLE Region	ADD weatherType VARCHAR(20)GOCREATE PROCEDURE RemoveColumnToRegion AS	ALTER TABLE Region	DROP COLUMN weatherType GO-- c. add a DEFAULT constraint;CREATE PROCEDURE AddDefaultConstraintToRegion AS	ALTER TABLE Region	ADD CONSTRAINT default_RegionName	DEFAULT 'Not named yet' FOR region_nameGOCREATE PROCEDURE RemoveDefaultConstraintFromRegion AS	ALTER TABLE Region	DROP default_RegionNameGO-- d. add a primary key; CREATE PROCEDURE AddPrimaryKeyConstraintFromHigherBeings AS	ALTER TABLE Higher_Beings	DROP CONSTRAINT PK_higher_being	ALTER TABLE Higher_Beings	ADD CONSTRAINT PK_higher_being PRIMARY KEY (being_name);GOCREATE PROCEDURE RemovePrimaryKeyFromHigherBeings AS	ALTER TABLE Higher_Beings	DROP CONSTRAINT PK_higher_being	ALTER TABLE Higher_Beings	ADD CONSTRAINT PK_higher_being PRIMARY KEY (being_id);GO-- e. add / remove a candidate key;CREATE PROCEDURE AddCandidateKeyConstraintToRegion AS	ALTER TABLE Region	ADD CONSTRAINT uniqueName	UNIQUE(region_name)GOCREATE PROCEDURE RemoveCandidateDefaultConstraintFromRegion AS	ALTER TABLE Region	DROP CONSTRAINT uniqueNameGO-- f. add / remove a foreign key;CREATE PROCEDURE AddForeignKeyToRivers AS	ALTER TABLE Rivers	ADD flowsInto INT	ALTER TABLE Rivers	ADD CONSTRAINT flow_foreign_key foreign key (flowsInto) references Sea(sea_id)GOCREATE PROCEDURE RemoveForeignKeyToRivers AS	ALTER TABLE Rivers	DROP flow_foreign_key	ALTER TABLE Rivers	DROP COLUMN flowsInto GO-- g. create / drop a tableCREATE PROCEDURE createFlowersTable AS		CREATE TABLE Flowers(			flower_id INT PRIMARY KEY,			flower_name VARCHAR(20),			region_id INT FOREIGN KEY references Region(region_id),			has_medicinal_properties BIT)GOCREATE PROCEDURE dropFlowersTable AS		DROP TABLE FlowersGO------------------------------------------------------------------------------ Create a new table that holds the current version of the database schema. -- Simplifying assumption: the version is an integer number.CREATE TABLE VersionOfDatabase (	currentVersion INT primary key );INSERT INTO VersionOfDatabase VALUES (1);-- create a table which stores the procedures which modify the version of the databseCREATE TABLE TransitionsBetweenVersions(	transition_id INT PRIMARY KEY,	currentVersion INT,	nextVersion INT,	procedureName VARCHAR(MAX),	UNIQUE (currentVersion, nextVersion)	);INSERT INTO TransitionsBetweenVersions VALUES	(1, 1, 2, 'ModifySeaName'), (2, 2, 1, 'ReverseModifyName'), 	(3, 2, 3, 'AddColumnToRegion'), (4, 3, 2, 'RemoveColumnToRegion'), 	(5, 3, 4, 'AddDefaultConstraintToRegion'), (6, 4, 3, 'RemoveDefaultConstraintFromRegion'), 	(7, 4, 5, 'AddPrimaryKeyConstraintFromHigherBeings'), (8, 5, 4, 'RemovePrimaryKeyFromHigherBeings'), 	(9, 5, 6, 'AddCandidateKeyConstraintToRegion'), (10, 6, 5, 'RemoveCandidateDefaultConstraintFromRegion'), 	(11, 6, 7, 'AddForeignKeyToRivers'), (12, 7, 6, 'RemoveForeignKeyToRivers'), 	(13, 7, 8, 'createFlowersTable'), (14, 8, 7, 'dropFlowersTable');GO-- Write a stored procedure that receives as a parameter a version -- number and brings the database to that versionCREATE OR ALTER  PROCEDURE changeVersionTo(@chosenVersion INT) AS	declare @currentVersion INT 	SELECT @currentVersion = currentVersion FROM VersionOfDatabase	--DOESN'T STOP EXECUTION, does severity need to be 20 or higher	if @chosenVersion < 1  	BEGIN		print('The chosen version does not exist') 		return	END	----DOESN'T STOP EXECUTION, does severity need to be 20 or higher	if @chosenVersion > (SELECT MAX(nextVersion) FROM TransitionsBetweenVersions)	BEGIN		print('The chosen version does not exist') 		return	END		declare @procedureName VARCHAR(MAX)	while @currentVersion < @chosenVersion  begin		SELECT @procedureName = procedureName			FROM TransitionsBetweenVersions T 			WHERE T.currentVersion = @currentVersion AND T.nextVersion = @currentVersion + 1		exec (@procedureName)		set @currentVersion = @currentVersion + 1	end	while @currentVersion > @chosenVersion begin		SELECT @procedureName = procedureName			FROM TransitionsBetweenVersions T 			WHERE T.currentVersion = @currentVersion AND T.nextVersion = @currentVersion - 1		exec (@procedureName)		set @currentVersion = @currentVersion - 1	end	UPDATE VersionOfDatabase SET currentVersion = @chosenVersion GO-- UPDATE VersionOfDatabase SET currentVersion = 8EXEC changeVersionTo -1UPDATE VersionOfDatabase SET currentVersion = 1SELECT * FROM VersionOfDatabaseSELECT * FROM TransitionsBetweenVersions