package model.myADTs;

import model.values.IValue;

import java.util.HashMap;
import java.util.Map;

public class MyHeap implements MyIHeap{
    //the key should be generated by the heap
    private HashMap<Integer, IValue> heap;
    private int nextFreeLocation;

    public MyHeap() {
        this.heap = new HashMap<Integer, IValue>();
        this.nextFreeLocation = 0;
    }

    @Override
    public IValue get(int key) {
        return heap.get(key);
    }

    @Override
    public boolean isEmpty() {
        return heap.isEmpty();
    }

    @Override
    public IValue put(IValue value) {
        return heap.put(generateNewKey(), value);
    }

    @Override
    public IValue changeValue(int address, IValue newValue) {
        return heap.put(address, newValue);
    }

    @Override
    public IValue remove(int key) {
        return heap.remove(key);
    }

    @Override
    public int getLastAddressGenerated() {
        return nextFreeLocation;
    }

    @Override
    public void setContent(Map<Integer, IValue> newContent) {
        this.clear();
        heap.putAll(newContent);
    }

    @Override
    public Map<Integer, IValue> getContent()
    {
        return (HashMap<Integer, IValue>) heap.clone();
    }

    @Override
    public void clear() {
        heap.clear();
    }

    private int generateNewKey() {
        nextFreeLocation++;
        return nextFreeLocation;
    }

    @Override
    public String toString() {
        String heapAsString = "MyHeap: {";
        for(int key: heap.keySet())
        {
            heapAsString += key + "->" + heap.get(key).toString() + "; ";
        }
        return heapAsString + "}";
    }
}
