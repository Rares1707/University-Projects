Program state ID: 2
Execution Stack: [(Ref int v;(new(v, 20);(Ref Ref int a;(new(a, v);(print(v);print(a))))))]
Symbol Table: {}
Output: []
FileTable: []
MyHeap: {}

Program state ID: 2
Execution Stack: [(new(v, 20);(Ref Ref int a;(new(a, v);(print(v);print(a))))), Ref int v]
Symbol Table: {}
Output: []
FileTable: []
MyHeap: {}

Program state ID: 2
Execution Stack: [(new(v, 20);(Ref Ref int a;(new(a, v);(print(v);print(a)))))]
Symbol Table: {v=(0, int)}
Output: []
FileTable: []
MyHeap: {}

Program state ID: 2
Execution Stack: [(Ref Ref int a;(new(a, v);(print(v);print(a)))), new(v, 20)]
Symbol Table: {v=(0, int)}
Output: []
FileTable: []
MyHeap: {}

Program state ID: 2
Execution Stack: [(Ref Ref int a;(new(a, v);(print(v);print(a))))]
Symbol Table: {v=(1, int)}
Output: []
FileTable: []
MyHeap: {1->20; }

Program state ID: 2
Execution Stack: [(new(a, v);(print(v);print(a))), Ref Ref int a]
Symbol Table: {v=(1, int)}
Output: []
FileTable: []
MyHeap: {1->20; }

Program state ID: 2
Execution Stack: [(new(a, v);(print(v);print(a)))]
Symbol Table: {a=(0, Ref int), v=(1, int)}
Output: []
FileTable: []
MyHeap: {1->20; }

Program state ID: 2
Execution Stack: [(print(v);print(a)), new(a, v)]
Symbol Table: {a=(0, Ref int), v=(1, int)}
Output: []
FileTable: []
MyHeap: {1->20; }

Program state ID: 2
Execution Stack: [(print(v);print(a))]
Symbol Table: {a=(2, Ref int), v=(1, int)}
Output: []
FileTable: []
MyHeap: {1->20; 2->(1, int); }

Program state ID: 2
Execution Stack: [print(a), print(v)]
Symbol Table: {a=(2, Ref int), v=(1, int)}
Output: []
FileTable: []
MyHeap: {1->20; 2->(1, int); }

Program state ID: 2
Execution Stack: [print(a)]
Symbol Table: {a=(2, Ref int), v=(1, int)}
Output: [(1, int)]
FileTable: []
MyHeap: {1->20; 2->(1, int); }

Program state ID: 2
Execution Stack: []
Symbol Table: {a=(2, Ref int), v=(1, int)}
Output: [(1, int), (2, Ref int)]
FileTable: []
MyHeap: {1->20; 2->(1, int); }

